{"ast":null,"code":"import { authAPI, securityAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'samurai-network/auth/GET_CAPTCHA_URL_SUCCESS';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaUrl: null // if null, then captcha is not required\n};\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n    case GET_CAPTCHA_URL_SUCCESS:\n      return {\n        ...state,\n        ...action.payload\n      };\n    default:\n      return state;\n  }\n};\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getCaptchaUrlSuccess = captchaUrl => ({\n  type: GET_CAPTCHA_URL_SUCCESS,\n  payload: {\n    captchaUrl\n  }\n});\nexport const getAuthUserData = () => async dispatch => {\n  let response = await authAPI.me();\n  if (response.data.resultCode === 0) {\n    let {\n      id,\n      login,\n      email\n    } = response.data.data;\n    dispatch(setAuthUserData(id, email, login, true));\n  }\n};\nexport const login = (email, password, rememberMe, captcha) => async dispatch => {\n  let response = await authAPI.login(email, password, rememberMe, captcha);\n  if (response.data.resultCode === 0) {\n    // success, get auth data\n    dispatch(getAuthUserData());\n  } else {\n    if (response.data.resultCode === 10) {\n      dispatch(getCaptchaUrl());\n    }\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n    dispatch(stopSubmit(\"login\", {\n      _error: message\n    }));\n  }\n};\nexport const getCaptchaUrl = () => async dispatch => {\n  const response = await securityAPI.getCaptchaUrl();\n  const captchaUrl = response.data.url;\n  dispatch(getCaptchaUrlSuccess(captchaUrl));\n};\nexport const logout = () => async dispatch => {\n  let response = await authAPI.logout();\n  if (response.data.resultCode === 0) {\n    dispatch(setAuthUserData(null, null, null, false));\n  }\n};\nexport default authReducer;","map":{"version":3,"names":["authAPI","securityAPI","stopSubmit","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","initialState","userId","email","login","isAuth","captchaUrl","authReducer","state","action","type","payload","setAuthUserData","getCaptchaUrlSuccess","getAuthUserData","dispatch","response","me","data","resultCode","id","password","rememberMe","captcha","getCaptchaUrl","message","messages","length","_error","url","logout"],"sources":["C:/Users/yt988/OneDrive/Documents/My/Programming/react-way-of-samurai/src/redux/auth-reducer.js"],"sourcesContent":["import {authAPI, securityAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA';\r\nconst GET_CAPTCHA_URL_SUCCESS = 'samurai-network/auth/GET_CAPTCHA_URL_SUCCESS';\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null // if null, then captcha is not required\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\r\n    type: SET_USER_DATA, payload:\r\n        {userId, email, login, isAuth}\r\n});\r\n\r\nexport const getCaptchaUrlSuccess = (captchaUrl) => ({\r\n    type: GET_CAPTCHA_URL_SUCCESS, payload: {captchaUrl}\r\n});\r\n\r\nexport const getAuthUserData = () => async (dispatch) => {\r\n    let response = await authAPI.me();\r\n\r\n    if (response.data.resultCode === 0) {\r\n        let {id, login, email} = response.data.data;\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\nexport const login = (email, password, rememberMe, captcha) => async (dispatch) => {\r\n    let response = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (response.data.resultCode === 0) {\r\n        // success, get auth data\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (response.data.resultCode === 10) {\r\n            dispatch(getCaptchaUrl());\r\n        }\r\n\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = () => async (dispatch) => {\r\n    const response = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = response.data.url;\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl));\r\n}\r\n\r\n\r\n\r\nexport const logout = () => async (dispatch) => {\r\n    let response = await authAPI.logout();\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false));\r\n    }\r\n}\r\n\r\nexport default authReducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}